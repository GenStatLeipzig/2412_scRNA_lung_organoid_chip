---
title: "azimuth"
format:
  html:
    df-print: paged
    fig-width: 10
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# INITITATE
  
```{r}
rm(list = setdiff(ls(), "seurat"))
# .libPaths("~/rpackages/angmar/")
.libPaths()

library(toolboxH)
library(Seurat)

library(here)
library(ggplot2)
library(scales)
library(ggthemes)
# BiocManager::install("scRNAseq")
library(BiocParallel)
library(patchwork)
# library(DropletUtils)
# library(celda)

require(gprofiler2)

# BiocManager::install("SingleR")

library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 30*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
# The total size of the 15 globals exported for future expression ('FUN()') is 12.32 GiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are 'object' (12.26 GiB of class 'numeric'), 'split.cells' (54.18 MiB of class 'list') and 'rowVars' (226.99 KiB of class 'function')
ncores = 4
plan("multicore", workers = ncores)
# initializeSkript()

options(scipen=999)
```

## special functions
```{r}
source(here("../../../07_programme/github/scRNATexMex/R/scRNA_functions_25-05-09.R"))


```
# LOAD




```{r}
s1_cellbender_filter = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S1/S1_cellbender_filter_matrix.seurat.rds" ))
head(colnames(s1_cellbender_filter))
s2_cellbender_filter = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S2/S2_cellbender_filter_matrix.seurat.rds" ))
s3_cellbender_filter = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S3/S3_cellbender_filter_matrix.seurat.rds" ))
s4_cellbender_filter = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S4/S4_cellbender_filter_matrix.seurat.rds" ))


## convert to normal geneids ----
geneinfo = fread(here("results/04_geneinfo_ensg_hgnc.txt.gz"))

# Function to update gene names in a Seurat object
update_gene_names <- function(seurat_obj, gene_map=geneinfo) {
  # Get current gene names (rownames)
  current_genes <- rownames(seurat_obj)

  stopifnot(all(current_genes %in% gene_map$geneid))
  new_genes = gene_map[match_hk(current_genes, gene_map$geneid), genename2]
  
  stopifnot(length(current_genes) == length(new_genes))
  stopifnot(all(!is.na(new_genes)))
  stopifnot(sum(duplicated(new_genes)) == 0)
  
  # Update rownames
  rownames(seurat_obj) <- new_genes
  
  return(seurat_obj)
}


# filter to minimal relevant
anno_previos = fread(here("results/04_scDBlFinder.txt.gz"))
anno_previos
anno_previos[, raw_rn := str_split(rn, "_") %>% sapply("[", 2)]

s1 = s1_cellbender_filter[,colnames(s1_cellbender_filter) %in% anno_previos$raw_rn]
s2 = s2_cellbender_filter[,colnames(s2_cellbender_filter) %in% anno_previos$raw_rn] 
s3 = s3_cellbender_filter[,colnames(s3_cellbender_filter) %in% anno_previos$raw_rn] 
s4 = s4_cellbender_filter[,colnames(s4_cellbender_filter) %in% anno_previos$raw_rn]



# Apply to each Seurat object
s1_updated <- update_gene_names(s1, geneinfo)
s2_updated <- update_gene_names(s2, geneinfo)
s3_updated <- update_gene_names(s3, geneinfo)
s4_updated <- update_gene_names(s4, geneinfo)


seurat_list <- list(S1 = s1_updated, 
                    S2 = s2_updated, 
                    S3 = s3_updated, 
                    S4 = s4_updated)

# Merge all objects in the list
combined_seurat_pre <- merge(x = seurat_list[[1]], 
                         y = seurat_list[2:length(seurat_list)],
                         add.cell.ids = names(seurat_list),
                         project = "organoid")



# add metadata ----
qlist11 = venn2(anno_previos$rn, colnames(combined_seurat_pre), mylabels = c("ScDoubletFinder\nnotBckrd.corrected", c("Cellbender\nBckrd.corrected")))
  str(qlist11)

combined_seurat = combined_seurat_pre[, colnames(combined_seurat_pre) %in% qlist11$q1]
combined_seurat

anno_previos2 = anno_previos[rn %in% qlist11$q1]

qlist12 = venn2(anno_previos2$rn, colnames(combined_seurat))

# Now process the combined object as needed
combined_seurat <- NormalizeData(combined_seurat)
combined_seurat <- FindVariableFeatures(combined_seurat)
combined_seurat <- ScaleData(combined_seurat)
combined_seurat <- RunPCA(combined_seurat)

# Add clustering
combined_seurat <- FindNeighbors(combined_seurat, dims = 1:30)
combined_seurat <- FindClusters(combined_seurat, resolution = 0.5)
combined_seurat <- RunUMAP(combined_seurat, dims = 1:30)



combined_seurat[["percent.mt"]] <- PercentageFeatureSet(combined_seurat, pattern = "^MT-")
combined_seurat[["percent.ribo"]] <- PercentageFeatureSet(combined_seurat, pattern = "^RP[SL]")


# Visualization
p1 <- DimPlot(combined_seurat, reduction = "umap", group.by = "sample", label = TRUE) + NoLegend()
p2 <- DimPlot(combined_seurat, reduction = "umap", group.by = "seurat_clusters", label = TRUE)+ NoLegend()
p3 <- VlnPlot(combined_seurat, features = c("nFeature_RNA", "nCount_RNA","percent.mt", "percent.ribo"), pt.size = 0 , ncol= 4) & geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) & scale_y_continuous(breaks = pretty_breaks(10), labels = label_number(accuracy = 1))
p3b <- VlnPlot(combined_seurat, features = c("nFeature_RNA", "nCount_RNA","percent.mt", "percent.ribo"), pt.size = 0 , ncol= 4) & geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) & scale_y_log10(breaks = log_breaks(10))

# Show the plots side by side
(p1 + p2) / p3 / p3b


# prelim annotation ----
Idents(combined_seurat) %>% mytable()
combined_seurat = JoinLayers(combined_seurat)
cellmarkers <- FindAllMarkers(combined_seurat, only.pos = FALSE, min.pct = 0.25, logfc.threshold = 0.1)
# ltnkcells_top_markers <- cellmarkers %>% group_by(cluster) %>% top_n(10, avg_log2FC)
setDT(cellmarkers)


# cellmarkers[, fullname := get_full_gene_names(gene)]


# chati ----
gptcelltype_hk <- function(input, tissuename=NULL, model='gpt-4', topgenenumber = 10, 
                           include_downreg = TRUE) {
  OPENAI_API_KEY <- Sys.getenv("OPENAI_API_KEY")
  if (OPENAI_API_KEY == "") {
    print("Note: OpenAI API key not found: returning the prompt itself.")
    API.flag <- 0
  } else {
    API.flag <- 1
  }
  
  if (class(input)=='list') {
    input <- sapply(input,paste,collapse=',')
  } else {
    # Create separate lists for upregulated and downregulated genes
    up_input <- input[input$avg_log2FC > 0,,drop=FALSE]
    up_genes <- tapply(up_input$gene, list(up_input$cluster), 
                       function(i) paste0(i[1:min(topgenenumber, length(i))], collapse=','))
    
    # Process downregulated genes if requested
    if (include_downreg) {
      down_input <- input[input$avg_log2FC < 0,,drop=FALSE]
      down_genes <- tapply(down_input$gene, list(down_input$cluster), 
                           function(i) paste0(i[1:min(topgenenumber, length(i))], collapse=','))
      
      # Create formatted input for each cluster
      formatted_input <- character(0)
      all_clusters <- unique(c(names(up_genes), names(down_genes)))
      
      for (cluster in all_clusters) {
        up_str <- if (cluster %in% names(up_genes)) up_genes[cluster] else ""
        down_str <- if (cluster %in% names(down_genes)) down_genes[cluster] else ""
        formatted_input[cluster] <- paste0("UP[", up_str, "] DOWN[", down_str, "]")
      }
    } else {
      # Use only upregulated genes if downregulated genes are not requested
      formatted_input <- paste0("UP[", up_genes, "] DOWN[]")
      names(formatted_input) <- names(up_genes)
    }
    
    input <- formatted_input
  }
  
  # Create the prompt header
  prompt_header <- paste0('Identify cell types of ', tissuename, ' cells using the following markers for each row representin a cluster of cells in a Seurat scRNA-seq analysis. ',
                          'Each row representing the cluster starts with a certain number as ID for this cluster and a colon, followed by genes differentially expressed in this cluster vs. the others, provided in two categories:\n',
                          '1. Upregulated genes are shown in brackets after "UP" (e.g., UP[Gene1,Gene2,Gene3])\n',
                          '2. Downregulated genes are shown in brackets after "DOWN" (e.g., DOWN[Gene4,Gene5,Gene6])\n\n',
                          'Only provide the cell type name. Do show cluster number and a colon before the name. If you do not find a celltype, return "Unknown". Return the same number of rows as the number of clusters provided as input\n ',
                          'Some clusters can be a mixture of multiple cell types.\n\n')
  
  # Generate full prompt with all genes included
  full_prompt <- paste0(prompt_header, paste0(names(input), ': ', unlist(input), collapse = '\n'))
  
  # Always print the full prompt for copying to online LLM
  print("Complete prompt (copy this to test with an online LLM):")
  cat(full_prompt)
  
  if (!API.flag){
    return(full_prompt)
  } else {
    print("Note: OpenAI API key found: returning the cell type annotations.")
    
    cutnum <- ceiling(length(input)/50)
    if (cutnum > 1) {
      cid <- as.numeric(cut(1:length(input),cutnum))	
      print(paste0("Note: Due to the number of clusters (", length(input), "), the API request will be split into ", 
                   cutnum, " batches."))
    } else {
      cid <- rep(1,length(input))
    }
    
    allres <- list()
    
    for (i in 1:cutnum) {
      # i=1
      id <- which(cid==i)
      
      # Generate batch-specific prompt
      batch_prompt <- paste0(prompt_header, paste0(names(input)[id], ': ', input[id], collapse = '\n'))
      
      # For each batch, print which clusters are included
      cat(paste0("Batch ", i, " includes clusters: ", paste(names(input)[id], collapse=", ")))
      
      # Use tryCatch to handle potential errors without looping
      result <- tryCatch({
        k <- openai::create_chat_completion(
          model = model,
          message = list(list("role" = "user", "content" = batch_prompt))
        )
        
        res <- strsplit(k$choices[,'message.content'],'\n')[[1]]
        
        # Check if we have the right number of results
        if (length(res) != length(id)) {
          warning(paste("Expected", length(id), "results, but got", length(res), 
                        "- the model response may be incomplete or incorrectly formatted."), immediate. = TRUE )
        }
        
        names(res) <- names(input)[id]
        res
      }, error = function(e) {
        # Print the error message and return NULL instead of retrying
        print(paste("Error in API call for batch", i, ":", e$message))
        print("Suggestion: Try reducing the number of genes per cluster or clusters per batch.")
        return(res)
      })
      
      if (!is.null(result)) {
        allres[[i]] <- result
      } else {
        print(paste("Batch", i, "failed. Continuing with next batch if available."))
      }
    }
    
    # Combine results from successful batches
    if (length(allres) > 0) {
      final_results <- gsub(',$', '', unlist(allres))
      print('Note: It is always recommended to check the results returned by GPT-4 in case of\n AI hallucination, before going to down-stream analysis.')
      return(final_results)
    } else {
      print("All API calls failed. Please check error messages above.")
      return(NULL)
    }
  }
}

# Sys.setenv(OPENAI_API_KEY = 'your_openai_API_key')


markers_sign = cellmarkers[cellmarkers$p_val_adj <=0.05,] %>% as.data.table(keep.rownames = T)
markers_sign$cluster %>% table() %>% sort(decreasing = T)  

markers_sign = markers_sign[grepl("Rp", gene)==FALSE]

markers_sign[markers_sign$avg_log2FC >0,"cluster"] %>% table() %>% sort(decreasing = T)  
markers_sign[markers_sign$avg_log2FC <0,"cluster"] %>% table() %>% sort(decreasing = T)  

setDF(markers_sign)

VlnPlot(combined_seurat, features = "percent.mt")
# Sys.setenv(OPENAI_API_KEY = 'your_openai_API_key')

if(file.exists(here("results/05_chatti_celltypes_gpt41.tsv"))==FALSE) {
  
  res_gpt4omini_30_ud <- gptcelltype_hk(input = markers_sign,tissuename = "Human  Epithelial and Endothelial cells", topgenenumber = 30, model = 'gpt-4o-mini', include_downreg=T) # less than one cent
  
  res_gpt4omini_30_ud
  
  # res_gpt4.1_30_ud <- gptcelltype_hk(input = markers_sign,tissuename = "Human Epithelial and Endothelial cells", topgenenumber = 30, model = 'gpt-4.1', include_downreg=TRUE) # 
  
  res_gpt4.1_30_ud
  
  chatti = data.table(
    res_gpt4.1_30_ud = res_gpt4.1_30_ud,
    res_gpt4omini_30_ud=res_gpt4omini_30_ud,
    celltypenum = names(res_gpt4.1_30_ud))
  chatti
  
  # celltype_df = data.table(celltypenunm  = factor(combined_seurat$rs_aortamarker_250328v4renamed) %>% as.numeric(),
  #                          celltype  = factor(combined_seurat$rs_aortamarker_250328v4renamed) %>% as.character()) %>% unique()
  # 
  # 
  # chatti[, celltypename := celltype_df[match_hk(chatti$celltypenum, celltype_df$celltypenunm), celltype]]
  fwrite(chatti, here("results/05_chatti_celltypes_gpt41.tsv"), sep = "\t")
} else chatti = fread(here("results/05_chatti_celltypes_gpt41.tsv"))
chatti


combined_seurat$celltype_chatti4_1 = chatti[match_hk(combined_seurat$seurat_clusters, chatti$celltypenum), res_gpt4.1_30_ud ]
combined_seurat$celltype_chatti4_1 %>% mytable()

seuratanno = combined_seurat@meta.data %>% data.table(keep.rownames = T)
seuratanno[, celltype_chatti4_1 := chatti[match_hk(seuratanno$seurat_clusters, chatti$celltypenum), res_gpt4.1_30_ud ]]


combined_seurat$celltype_chatti4_1_pur = str_split(combined_seurat$celltype_chatti4_1, "\\:") %>% sapply("[", 2) %>% str_trim()
combined_seurat$celltype_chatti4_1_pur %>% mytable()


seuratanno[, celltype_chatti4_1_pur := str_split(celltype_chatti4_1, "\\:") %>% sapply("[", 2) %>% str_trim()]
seuratanno[, .N,celltype_chatti4_1_pur]


ggplotSankey(seuratanno[,.(sample, celltype_chatti4_1)])
ggplotSankey(seuratanno[,.(celltype_chatti4_1, sample )])
ggplotSankey(seuratanno[,.(celltype_chatti4_1_pur, sample )])
sort(unique(seuratanno$celltype_chatti4_1_pur))

DimPlot(combined_seurat, group.by = "celltype_chatti4_1", label = T, repel = T) 



```

# compare with 4.5
```{r}
seuratanno_old = fread(here("results/05_1_seuratanno_celltypes_superliberalfiltered.txt.gz"))
seuratanno$celltype_chatti4_5_pur = seuratanno_old[match_hk(seuratanno$seurat_clusters, seuratanno_old$seurat_clusters, makeunique = T, importcol = seuratanno_old$celltype_chatti4_5_pur), celltype_chatti4_5_pur %>% str_trim()]
seuratanno$celltype_chatti4_5_pur %>% mytable()
ggplotSankey(seuratanno[,.(celltype_chatti4_1_pur, sample ,celltype_chatti4_5_pur)])
ggplotSankey(seuratanno[,.(celltype_chatti4_1_pur  ,celltype_chatti4_5_pur)])

unique(seuratanno$celltype_chatti4_1) %>% sort()%>% paste(collapse = "\n")  %>% cat()
unique(seuratanno_old$celltype_chatti4_5) %>% sort()%>% paste(collapse = "\n")  %>% cat()
```

# show markerplot supporting celltypes
```{r}
lung_markers <- rbind(
  data.table(celltype = "Basal epithelial", markers = c("KRT5", "TP63", "EGFR", "KRT14")),  # KRT5/TP63 are canonical markers
  data.table(celltype = "Type 2 alveolar", markers = c("SFTPC", "SFTPB", "SFTA2", "NAPSA")),  # SFTPC is canonical specific marker
  data.table(celltype = "Type 1 alveolar", markers = c("AGER", "HOPX", "CADM1", "RBMS3")),  # AGER is canonical specific marker
  data.table(celltype = "Club", markers = c("SCGB1A1", "CYP2B7P", "TMC5", "NEBL")),  # SCGB1A1 is canonical but not in data
  data.table(celltype = "Endothelial", markers = c("CDH5", "ERG", "CALCRL", "TIE1")),  # CDH5 is canonical specific marker
  data.table(celltype = "Fibroblasts", markers = c("VIM", "LGALS1", "COL1A1", "FABP5")),  # VIM/COL1A1 are canonical
  data.table(celltype = "Epithelial", markers = c("EPCAM", "KRT8", "KRT19", "CDH1"))  # EPCAM is canonical specific marker
)

# Create species-specific plots - Basic version
marker_plot_basic <- doMarkerDotPlot(seurat = combined_seurat, 
                                     marker_groups_peter = lung_markers, 
                                     grouping_factor = 'celltype_chatti4_1_pur'
) 

marker_plot_basic2 <- doMarkerDotPlot(seurat = combined_seurat, 
                                     marker_groups_peter = lung_markers, 
                                     grouping_factor = 'celltype_chatti4_1_pur', custom_y_axis = c("Endothelial Cells","Unknown", "Alveolar Type II (ATII) Cells","Club Cells","Alveolar Type I (ATI) Cells",  
  "Basal Epithelial Cells", 
"Epithelial Cells")
) 

marker_plot_cluster <- doMarkerDotPlot(seurat = combined_seurat, 
                                     marker_groups_peter = lung_markers, 
                                     grouping_factor = 'celltype_chatti4_1'
) 

marker_plot_cluster2 <- doMarkerDotPlot(seurat = combined_seurat, 
                                     marker_groups_peter = lung_markers, 
                                     grouping_factor = 'celltype_chatti4_1', custom_y_axis = c("4: Endothelial Cells  ", "12: Endothelial Cells  ", 
"13: Endothelial Cells", "10: Unknown  ", "3: Unknown  ","8: Club Cells  ", "1: Alveolar Type I (ATI) Cells  ","2: Alveolar Type I (ATI) Cells  ", "7: Alveolar Type II (ATII) Cells  ", "0: Basal Epithelial Cells  ", "6: Unknown  ", 
"9: Unknown  ", 
 "5: Epithelial Cells  ", 
"11: Epithelial Cells  ")
) 
```

## assign consensus
```{r}
seuratanno[,.N, .(seurat_clusters, celltype_chatti4_1)]
seuratanno[, celltype_chatti4_1_purcons := ifelse(seurat_clusters %in% c(6,9), "Basal Epithelial Cells",
                                                  ifelse(seurat_clusters %in% c(6,9), "Basal Epithelial Cells",
                                                ifelse(seurat_clusters %in% c(3,10), "Fibroblasts",celltype_chatti4_1_pur)))]

combined_seurat$celltype_chatti4_1_purcons = seuratanno[match_hk(combined_seurat$seurat_clusters, seuratanno$seurat_clusters, makeunique = TRUE, importcol = seuratanno$celltype_chatti4_1_purcons), celltype_chatti4_1_purcons]

marker_plot_consensus <- doMarkerDotPlot(seurat = combined_seurat, 
                                     marker_groups_peter = lung_markers, 
                                     grouping_factor = 'celltype_chatti4_1_purcons', custom_y_axis = c("Endothelial Cells", "Fibroblasts","Alveolar Type II (ATII) Cells", 
"Club Cells",  "Alveolar Type I (ATI) Cells","Basal Epithelial Cells", 
"Epithelial Cells")
) 

DimPlot(combined_seurat, group.by = "celltype_chatti4_1_purcons", label = T, repel = T,label.size = 5) + NoLegend()
ggplotSankey(seuratanno[,.(celltype_chatti4_1_purcons, sample )])
```


# Save
```{r}
fwrite(seuratanno, here("results/05_1_seuratanno_celltypes_superliberalfiltered_gpt41.txt.gz"), sep = "\t")
saveRDS(combined_seurat, here("results/05_1_seurat_celltypes_superliberalfiltered_gpt41.rds"))
```


# finalize
```{r}
finalizeSkript()
```
