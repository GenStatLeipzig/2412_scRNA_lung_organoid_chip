---
title: "scDBlFinder"
format:
  html:
    df-print: kable
    fig-width: 10
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# INITITATE

```{r}
rm(list = setdiff(ls(), "seurat"))

.libPaths()

library(toolboxH)
library(Seurat)

library(here)
library(ggplot2)
library(scales)
library(ggthemes)

library(BiocParallel)
library(patchwork)
# library(DropletUtils)


require(gprofiler2)

# BiocManager::install("SingleR")

library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 6*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
# The total size of the 15 globals exported for future expression ('FUN()') is 12.32 GiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are 'object' (12.26 GiB of class 'numeric'), 'split.cells' (54.18 MiB of class 'list') and 'rowVars' (226.99 KiB of class 'function')
ncores = 4
plan("multicore", workers = ncores)
# initializeSkript()

options(scipen=999)
```

## special functions
```{r}
source(here("../../../07_programme/github/scRNATexMex/R/scRNA_functions_25-02-28.R"))


```
# LOAD




```{r}
s1_raw = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S1/S1_raw_matrix.seurat.rds" ))
s2_raw = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S2/S2_raw_matrix.seurat.rds" ))
s3_raw = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S3/S3_raw_matrix.seurat.rds" ))
s4_raw = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S4/S4_raw_matrix.seurat.rds" ))

s1_filtered = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S1/S1_filtered_matrix.seurat.rds" ))
s2_filtered = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S2/S2_filtered_matrix.seurat.rds" ))
s3_filtered = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S3/S3_filtered_matrix.seurat.rds" ))
s4_filtered = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S4/S4_filtered_matrix.seurat.rds" ))

s1_cellbender_filter = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S1/S1_cellbender_filter_matrix.seurat.rds" ))
s2_cellbender_filter = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S2/S2_cellbender_filter_matrix.seurat.rds" ))
s3_cellbender_filter = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S3/S3_cellbender_filter_matrix.seurat.rds" ))
s4_cellbender_filter = readRDS(here("../gitOrganoid_hk/results/cellranger1/cellranger/mtx_conversions/S4/S4_cellbender_filter_matrix.seurat.rds" ))


# filter 
s1_raw_anno = data.table(s1_raw@meta.data, keep.rownames = T)
s2_raw_anno = data.table(s2_raw@meta.data, keep.rownames = T)
s3_raw_anno = data.table(s3_raw@meta.data, keep.rownames = T)
s4_raw_anno = data.table(s4_raw@meta.data, keep.rownames = T)

cellranger_raw_anno = rbind(s1_raw_anno[,dataset := 's1_raw'],
                            s2_raw_anno[,dataset := 's2_raw'],
                            s3_raw_anno[,dataset := 's3_raw'],
                            s4_raw_anno[,dataset := 's4_raw'])


s1_filtered_anno = data.table(s1_filtered@meta.data, keep.rownames = T)
s2_filtered_anno = data.table(s2_filtered@meta.data, keep.rownames = T)
s3_filtered_anno = data.table(s3_filtered@meta.data, keep.rownames = T)
s4_filtered_anno = data.table(s4_filtered@meta.data, keep.rownames = T)

cellranger_filtered_anno = rbind(s1_filtered_anno[,dataset := 's1_filtered'],
                                 s2_filtered_anno[,dataset := 's2_filtered'],
                                 s3_filtered_anno[,dataset := 's3_filtered'],
                                 s4_filtered_anno[,dataset := 's4_filtered'])


s1_cellbender_filter_anno = data.table(s1_cellbender_filter@meta.data, keep.rownames = T)
s2_cellbender_filter_anno = data.table(s2_cellbender_filter@meta.data, keep.rownames = T)
s3_cellbender_filter_anno = data.table(s3_cellbender_filter@meta.data, keep.rownames = T)
s4_cellbender_filter_anno = data.table(s4_cellbender_filter@meta.data, keep.rownames = T)

cellbender_filter_anno = rbind(s1_cellbender_filter_anno[,dataset := 's1_cellbender_filter_'],
                               s2_cellbender_filter_anno[,dataset := 's2_cellbender_filter_'],
                               s3_cellbender_filter_anno[,dataset := 's3_cellbender_filter_'],
                               s4_cellbender_filter_anno[,dataset := 's4_cellbender_filter_'])


qlist3 = venn3(cellbender_filter_anno$rn, cellranger_raw_anno$rn, cellranger_filtered_anno$rn)

mytable(cellranger_filtered_anno$sample)

# Option 2: Using a list-based approach (more flexible)

s1 = s1_raw[,colnames(s1_raw) %in% cellbender_filter_anno$rn]
s2 = s2_raw[,colnames(s2_raw) %in% cellbender_filter_anno$rn] 
s3 = s3_raw[,colnames(s3_raw) %in% cellbender_filter_anno$rn] 
s4 = s4_raw[,colnames(s4_raw) %in% cellbender_filter_anno$rn]


seurat_list_pre <- list(
  S1 = s1, 
  S2 = s2, 
  S3 = s3, 
  S4 = s4
)

# Merge all objects in the list
combined_seurat <- merge(x = seurat_list_pre[[1]], 
                         y = seurat_list_pre[2:length(seurat_list_pre)],
                         add.cell.ids = names(seurat_list_pre),
                         project = "organoid")

combined_seurat
combined_seurat = JoinLayers(combined_seurat)
combined_seurat
## convert to normal geneids ----
geneinfo_pre = fread(here("../gitOrganoid_hk/results/cellranger1/cellranger/mkref/cellranger_reference/star/geneInfo.tab"), skip = 1, col.names = c(  "geneid", "genename", "genetype"))

Idents(combined_seurat) %>% mytable()
Idents(combined_seurat) = combined_seurat$orig.ident
Idents(combined_seurat) %>% mytable()
avex = AverageExpression(combined_seurat, group.by = "orig.ident", assays = "RNA", layer = "counts")
avex2 = as.data.table(avex$RNA, keep.rownames = T)

qlist1 = venn2(geneinfo_pre$geneid, rownames(combined_seurat), mylabels = c("geneid", "cellranger"), mytitle = "Gene name convert")
str(qlist1) # ENSG00000290825 (DEAD/H-Box Helicase 11 Like 16 (Pseudogene)) is an RNA Gene, and is affiliated with the lncRNA class. Official Symbol
# DDX11L1provided by HGNC

geneinfo = rbind(geneinfo_pre, data.table(geneid = "ENSG00000290825", genename = "DDX11L1", genetype = "lncRNA"))
qlist2 = venn2(geneinfo2$geneid, rownames(combined_seurat), mylabels = c("geneid", "cellranger"), mytitle = "Gene name convert")


geneinfo[, average_expression10k := avex2[match_hk(geneinfo$geneid, avex2$rn), round(10000*V1, 1)]]
setorder(geneinfo, -average_expression10k)
geneinfo[, genename2 := ifelse(duplicated(genename), paste0(genename, "-dupli"),genename)]
geneinfo[, genename2 := ifelse(duplicated(genename2), str_replace(genename2, "-dupli", "-dupli2"),genename2)]

geneinfo[allDuplicatedEntries(geneid)]
geneinfo[allDuplicatedEntries(genename)]
geneinfo[allDuplicatedEntries(genename2)]



# Function to update gene names in a Seurat object
update_gene_names <- function(seurat_obj, gene_map=geneinfo) {
  # Get current gene names (rownames)
  current_genes <- rownames(seurat_obj)
  
  stopifnot(all(current_genes %in% gene_map$geneid))
  new_genes = gene_map[match_hk(current_genes, gene_map$geneid), genename2]
  
  stopifnot(length(current_genes) == length(new_genes))
  stopifnot(all(!is.na(new_genes)))
  stopifnot(sum(duplicated(new_genes)) == 0)
  
  # Update rownames
  rownames(seurat_obj) <- new_genes
  
  return(seurat_obj)
}

# Apply to each Seurat object
s1_updated <- update_gene_names(s1, geneinfo)
s2_updated <- update_gene_names(s2, geneinfo)
s3_updated <- update_gene_names(s3, geneinfo)
s4_updated <- update_gene_names(s4, geneinfo)


seurat_list <- list(S1 = s1_updated, 
                    S2 = s2_updated, 
                    S3 = s3_updated, 
                    S4 = s4_updated)

# Merge all objects in the list
combined_seurat <- merge(x = seurat_list[[1]], 
                         y = seurat_list[2:length(seurat_list)],
                         add.cell.ids = names(seurat_list),
                         project = "organoid")

combined_seurat
# Check the first few gene names to verify
head(rownames(s1_updated))

# filter  minimal -----
combined_seurat[["percent.mt"]] <- PercentageFeatureSet(combined_seurat, pattern = "^MT-")
combined_seurat[["percent.ribo"]] <- PercentageFeatureSet(combined_seurat, pattern = "^RP[SL]")


# Define thresholds
min_features <- 50
max_features <-  (max(combined_seurat$nFeature_RNA)*1.1) %>% round(-3)
max_features
min_counts <- 50
max_counts <- (max(combined_seurat$nCount_RNA)*1.1) %>% round(-4)
max_counts
max_mt <- 100

# Visualization
Idents(combined_seurat) = combined_seurat$sample
p3 <- VlnPlot(combined_seurat, features = c("nFeature_RNA", "nCount_RNA","percent.mt", "percent.ribo"), pt.size = 0, ncol= 4) & 
  geom_boxplot(width = 0.02, fill = "white", outlier.shape = NA) & 
  scale_y_continuous(breaks = pretty_breaks(10), labels = label_number(accuracy = 1))

# Add threshold lines to each panel in p3
p3[[1]] <- p3[[1]] + 
  geom_hline(yintercept = min_features, color = "red", linetype = "dashed") +
  geom_hline(yintercept = max_features, color = "red", linetype = "dashed")
p3[[2]] <- p3[[2]] + 
  geom_hline(yintercept = min_counts, color = "red", linetype = "dashed") +
  geom_hline(yintercept = max_counts, color = "red", linetype = "dashed")
p3[[3]] <- p3[[3]] + 
  geom_hline(yintercept = max_mt, color = "red", linetype = "dashed")

# Add horizontal lines to log scale plots
p3b <- VlnPlot(combined_seurat, features = c("nFeature_RNA", "nCount_RNA","percent.mt", "percent.ribo"), pt.size = 0, ncol= 4) & 
  geom_boxplot(width = 0.02, fill = "white", outlier.shape = NA) & 
  scale_y_log10(breaks = log_breaks(10))

# Add threshold lines to each panel in p3b
p3b[[1]] <- p3b[[1]] + 
  geom_hline(yintercept = min_features, color = "red", linetype = "dashed") +
  geom_hline(yintercept = max_features, color = "red", linetype = "dashed")
p3b[[2]] <- p3b[[2]] + 
  geom_hline(yintercept = min_counts, color = "red", linetype = "dashed") +
  geom_hline(yintercept = max_counts, color = "red", linetype = "dashed")
p3b[[3]] <- p3b[[3]] + 
  geom_hline(yintercept = max_mt, color = "red", linetype = "dashed")

# Show the plots side by side
p3 / p3b



combined_seurat_filt1 <- subset(combined_seurat, 
                                subset = nFeature_RNA > min_features & 
                                  nFeature_RNA < max_features & 
                                  nCount_RNA > min_counts & 
                                  nCount_RNA < max_counts & 
                                  percent.mt < max_mt) %>% 
  JoinLayers()
1-ncol(combined_seurat_filt1)/ncol(combined_seurat)


mytable(combined_seurat_filt1$sample)


# Now process the combined object as needed
combined_seurat_filt1 <- NormalizeData(combined_seurat_filt1)
combined_seurat_filt1 <- FindVariableFeatures(combined_seurat_filt1)
combined_seurat_filt1 <- ScaleData(combined_seurat_filt1)
combined_seurat_filt1 <- RunPCA(combined_seurat_filt1)

# Add clustering
combined_seurat_filt1 <- FindNeighbors(combined_seurat_filt1, dims = 1:30)
combined_seurat_filt1 <- FindClusters(combined_seurat_filt1, resolution = 0.5)
combined_seurat_filt1 <- RunUMAP(combined_seurat_filt1, dims = 1:30)




# Visualization
p1 <- DimPlot(combined_seurat_filt1, reduction = "umap", group.by = "sample", label = TRUE) + NoLegend()
p2 <- DimPlot(combined_seurat_filt1, reduction = "umap", group.by = "seurat_clusters", label = TRUE)+ NoLegend()


# Visualization
Idents(combined_seurat_filt1) = combined_seurat_filt1$seurat_clusters
mytable(Idents(combined_seurat_filt1) )
# Add horizontal lines to linear scale plots
p3 <- VlnPlot(combined_seurat_filt1, features = c("nFeature_RNA", "nCount_RNA","percent.mt", "percent.ribo"), pt.size = 0, ncol= 4) & 
  geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) & 
  scale_y_continuous(breaks = pretty_breaks(10), labels = label_number(accuracy = 1))

# Add threshold lines to each panel in p3
p3[[1]] <- p3[[1]] + 
  geom_hline(yintercept = min_features, color = "red", linetype = "dashed") +
  geom_hline(yintercept = max_features, color = "red", linetype = "dashed")
p3[[2]] <- p3[[2]] + 
  geom_hline(yintercept = min_counts, color = "red", linetype = "dashed") +
  geom_hline(yintercept = max_counts, color = "red", linetype = "dashed")
p3[[3]] <- p3[[3]] + 
  geom_hline(yintercept = max_mt, color = "red", linetype = "dashed")

# Add horizontal lines to log scale plots
p3b <- VlnPlot(combined_seurat_filt1, features = c("nFeature_RNA", "nCount_RNA","percent.mt", "percent.ribo"), pt.size = 0, ncol= 4) & 
  geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) & 
  scale_y_log10(breaks = log_breaks(10))

# Add threshold lines to each panel in p3b
p3b[[1]] <- p3b[[1]] + 
  geom_hline(yintercept = min_features, color = "red", linetype = "dashed") +
  geom_hline(yintercept = max_features, color = "red", linetype = "dashed")
p3b[[2]] <- p3b[[2]] + 
  geom_hline(yintercept = min_counts, color = "red", linetype = "dashed") +
  geom_hline(yintercept = max_counts, color = "red", linetype = "dashed")
p3b[[3]] <- p3b[[3]] + 
  geom_hline(yintercept = max_mt, color = "red", linetype = "dashed")

# Show the plots side by side
(p1 + p2) / p3 / p3b



combined_seurat_filt1$orig.ident %>% table()
combined_seurat_filt1$run10x = combined_seurat_filt1$sample
combined_seurat_filt1$run10x %>% mytable()
# checkSCTslots(combined_seurat_filt1)

```




```{r}
sce <- as.SingleCellExperiment(combined_seurat_filt1, assay= "RNA")
sce$run10x %>% table()
library(BiocParallel)
require(scDblFinder)
sce <- scDblFinder(sce, samples="run10x")
table(sce$scDblFinder.class)
sce$ident %>% table()
sce_attrib = sce@colData %>% as.data.table(keep.rownames = T)
sce_attrib[,.N, .( scDblFinder.class, sample)] 

resi = sce_attrib[, . (rn, scDblFinder.sample, scDblFinder.class, scDblFinder.score, scDblFinder.weighted, scDblFinder.cxds_score)] # in particular 'scDblFinder.score' (the final score used) and 'scDblFinder.class' (whether the cell is called as 'doublet' or 'singlet').
resi[, boxplot(scDblFinder.score~scDblFinder.class)$x]

combined_seurat_filt1$scDblFinder.score = resi[match_hk(colnames(combined_seurat_filt1), resi$rn), scDblFinder.score]
combined_seurat_filt1$scDblFinder.class = resi[match_hk(colnames(combined_seurat_filt1), resi$rn), scDblFinder.class]

mytable(combined_seurat_filt1$scDblFinder.class)


(DimPlot(combined_seurat_filt1, group.by = c("seurat_clusters"), label = TRUE) + NoLegend()) + 
  FeaturePlot(combined_seurat_filt1, features =  "scDblFinder.score") +
  (VlnPlot(combined_seurat_filt1, features = "scDblFinder.score", group.by = "seurat_clusters", pt.size = 0) + scale_y_continuous(breaks = pretty_breaks(10), labels =  label_percent(accuracy = 1)) + geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA)) +
  (ggplot(sce_attrib, aes(x = seurat_clusters, fill = scDblFinder.class)) + geom_bar(position = "fill")  + theme_minimal(base_size = 15) + theme(legend.position = "top") + scale_y_continuous(labels = label_percent(accuracy = 1)))
```

# fullnames to geninfo
```{r}

library(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
gendetails <- select(org.Hs.eg.db, keys = geneinfo$geneid, columns = c("ENSEMBL","SYMBOL", "GENENAME"), keytype = "ENSEMBL") %>% data.table()

qlist644 = venn2(gendetails$ENSEMBL, geneinfo$geneid )
showNA(gendetails)
gendetails2 <- gendetails[ENSEMBL %in% geneinfo$geneid &
                            SYMBOL %in% geneinfo$genename]

gendetails2[, id := paste(ENSEMBL, SYMBOL , sep = " | ")]
geneinfo[, id := paste(geneid, genename , sep = " | ")]

qlist645 = venn2(gendetails2$id, geneinfo$id )
qlist645$q2
allDuplicatedEntries(gendetails)

gendetails3 = gendetails2[, .(SYMBOL, GENENAME)] %>% unique()
gendetails3[allDuplicatedEntries(SYMBOL)]

geneinfo[, fullname := gendetails3[match_hk(geneinfo$genename, gendetails3$SYMBOL), GENENAME]]
geneinfo[, id := NULL]
showNA(geneinfo)
```


# save
```{r}
fwrite(resi, here("results/04_scDBlFinder.txt.gz"), sep = "\t")
fwrite(geneinfo, here("results/04_geneinfo_ensg_hgnc.txt.gz"), sep = "\t")
```


# finalizeScript
```{r}
finalizeSkript()
```

